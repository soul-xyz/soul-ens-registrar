/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SoulRegistrarInterface extends ethers.utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "baseURI()": FunctionFragment;
    "claimed(bytes32,bytes32)": FunctionFragment;
    "commissionBips()": FunctionFragment;
    "ensRegistry()": FunctionFragment;
    "ensResolver()": FunctionFragment;
    "feeConfigs(bytes32)": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "merkleRoots(bytes32)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])": FunctionFragment;
    "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])": FunctionFragment;
    "registrable()": FunctionFragment;
    "relayer()": FunctionFragment;
    "renderer()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setCommissionBips(uint256)": FunctionFragment;
    "setMerkleRoot(bytes32,bytes32)": FunctionFragment;
    "setRegistrable(bool)": FunctionFragment;
    "setRegistrationFee(bytes32,tuple)": FunctionFragment;
    "setRelayer(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFees(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "baseURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commissionBips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ensRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ensResolver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeConfigs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoots",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerWithNFTOwnership",
    values: [string, BigNumberish, BytesLike, string, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerWithProof",
    values: [BytesLike, BytesLike, string[], string[], BytesLike[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "registrable",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "relayer", values?: undefined): string;
  encodeFunctionData(functionFragment: "renderer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCommissionBips",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrable",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationFee",
    values: [BytesLike, { recipient: string; fee: BigNumberish }]
  ): string;
  encodeFunctionData(functionFragment: "setRelayer", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFees",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseURI", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commissionBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ensResolver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeConfigs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merkleRoots",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWithNFTOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renderer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCommissionBips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRelayer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFees",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "CommissionBipsUpdated(uint256)": EventFragment;
    "FeePayout(address,address,uint256)": EventFragment;
    "FeeUpdated(bytes32,uint256)": EventFragment;
    "FeeWithdrawal(address,address,uint256)": EventFragment;
    "MerkleRootUpdated(bytes32,bytes32)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RegisteredSubdomain(bytes32,string,address)": EventFragment;
    "RegistrableUpdated(bool)": EventFragment;
    "RelayerUpdated(address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CommissionBipsUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeePayout"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MerkleRootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisteredSubdomain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegistrableUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class SoulRegistrar extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SoulRegistrarInterface;

  functions: {
    acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { balance: BigNumber }>;

    baseURI(overrides?: CallOverrides): Promise<[string]>;

    "baseURI()"(overrides?: CallOverrides): Promise<[string]>;

    claimed(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimed(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    commissionBips(overrides?: CallOverrides): Promise<[BigNumber]>;

    "commissionBips()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ensRegistry(overrides?: CallOverrides): Promise<[string]>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<[string]>;

    ensResolver(overrides?: CallOverrides): Promise<[string]>;

    "ensResolver()"(overrides?: CallOverrides): Promise<[string]>;

    feeConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

    "feeConfigs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    merkleRoots(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "merkleRoots(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<[string]>;

    registerWithNFTOwnership(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])"(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    registerWithProof(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])"(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    registrable(overrides?: CallOverrides): Promise<[boolean]>;

    "registrable()"(overrides?: CallOverrides): Promise<[boolean]>;

    relayer(overrides?: CallOverrides): Promise<[string]>;

    "relayer()"(overrides?: CallOverrides): Promise<[string]>;

    renderer(overrides?: CallOverrides): Promise<[string]>;

    "renderer()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setCommissionBips(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setCommissionBips(uint256)"(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMerkleRoot(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMerkleRoot(bytes32,bytes32)"(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistrable(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistrable(bool)"(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRegistrationFee(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRegistrationFee(bytes32,(address,uint256))"(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setRelayer(
      newRelayer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRelayer(address)"(
      newRelayer: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    withdrawFees(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "withdrawFees(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "acceptOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  approve(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    owner: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  baseURI(overrides?: CallOverrides): Promise<string>;

  "baseURI()"(overrides?: CallOverrides): Promise<string>;

  claimed(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimed(bytes32,bytes32)"(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  commissionBips(overrides?: CallOverrides): Promise<BigNumber>;

  "commissionBips()"(overrides?: CallOverrides): Promise<BigNumber>;

  ensRegistry(overrides?: CallOverrides): Promise<string>;

  "ensRegistry()"(overrides?: CallOverrides): Promise<string>;

  ensResolver(overrides?: CallOverrides): Promise<string>;

  "ensResolver()"(overrides?: CallOverrides): Promise<string>;

  feeConfigs(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

  "feeConfigs(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

  getApproved(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getApproved(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isApprovedForAll(address,address)"(
    owner: string,
    operator: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  merkleRoots(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  "merkleRoots(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "ownerOf(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

  registerWithNFTOwnership(
    nftContract: string,
    tokenId: BigNumberish,
    rootNode: BytesLike,
    label: string,
    rootShard: BytesLike,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])"(
    nftContract: string,
    tokenId: BigNumberish,
    rootNode: BytesLike,
    label: string,
    rootShard: BytesLike,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  registerWithProof(
    rootNode: BytesLike,
    rootShard: BytesLike,
    receivers: string[],
    labels: string[],
    merkleProofs: BytesLike[][],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])"(
    rootNode: BytesLike,
    rootShard: BytesLike,
    receivers: string[],
    labels: string[],
    merkleProofs: BytesLike[][],
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  registrable(overrides?: CallOverrides): Promise<boolean>;

  "registrable()"(overrides?: CallOverrides): Promise<boolean>;

  relayer(overrides?: CallOverrides): Promise<string>;

  "relayer()"(overrides?: CallOverrides): Promise<string>;

  renderer(overrides?: CallOverrides): Promise<string>;

  "renderer()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setApprovalForAll(address,bool)"(
    operator: string,
    approved: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setCommissionBips(
    newBips: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setCommissionBips(uint256)"(
    newBips: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMerkleRoot(
    rootShard: BytesLike,
    newMerkleRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMerkleRoot(bytes32,bytes32)"(
    rootShard: BytesLike,
    newMerkleRoot: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistrable(
    newRegistrable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistrable(bool)"(
    newRegistrable: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRegistrationFee(
    rootNode: BytesLike,
    feeConfig: { recipient: string; fee: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRegistrationFee(bytes32,(address,uint256))"(
    rootNode: BytesLike,
    feeConfig: { recipient: string; fee: BigNumberish },
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setRelayer(
    newRelayer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRelayer(address)"(
    newRelayer: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "tokenURI(uint256)"(
    tokenId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferFrom(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: string,
    to: string,
    tokenId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  withdrawFees(to: string, overrides?: Overrides): Promise<ContractTransaction>;

  "withdrawFees(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    "acceptOwnership()"(overrides?: CallOverrides): Promise<void>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<string>;

    "baseURI()"(overrides?: CallOverrides): Promise<string>;

    claimed(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimed(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    commissionBips(overrides?: CallOverrides): Promise<BigNumber>;

    "commissionBips()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensRegistry(overrides?: CallOverrides): Promise<string>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<string>;

    ensResolver(overrides?: CallOverrides): Promise<string>;

    "ensResolver()"(overrides?: CallOverrides): Promise<string>;

    feeConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

    "feeConfigs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { recipient: string; fee: BigNumber }>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    merkleRoots(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    "merkleRoots(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    ownerOf(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<string>;

    registerWithNFTOwnership(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])"(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerWithProof(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])"(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: CallOverrides
    ): Promise<void>;

    registrable(overrides?: CallOverrides): Promise<boolean>;

    "registrable()"(overrides?: CallOverrides): Promise<boolean>;

    relayer(overrides?: CallOverrides): Promise<string>;

    "relayer()"(overrides?: CallOverrides): Promise<string>;

    renderer(overrides?: CallOverrides): Promise<string>;

    "renderer()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCommissionBips(
      newBips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCommissionBips(uint256)"(
      newBips: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMerkleRoot(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMerkleRoot(bytes32,bytes32)"(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistrable(
      newRegistrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setRegistrable(bool)"(
      newRegistrable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRegistrationFee(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    "setRegistrationFee(bytes32,(address,uint256))"(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: CallOverrides
    ): Promise<void>;

    setRelayer(newRelayer: string, overrides?: CallOverrides): Promise<void>;

    "setRelayer(address)"(
      newRelayer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenURI(tokenId: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFees(to: string, overrides?: CallOverrides): Promise<void>;

    "withdrawFees(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approval(
      owner: string | null,
      approved: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;

    ApprovalForAll(
      owner: string | null,
      operator: string | null,
      approved: null
    ): EventFilter;

    CommissionBipsUpdated(newBips: null): EventFilter;

    FeePayout(from: string | null, to: string | null, value: null): EventFilter;

    FeeUpdated(rootNode: BytesLike | null, newFee: null): EventFilter;

    FeeWithdrawal(
      from: string | null,
      to: string | null,
      value: null
    ): EventFilter;

    MerkleRootUpdated(
      rootShard: BytesLike | null,
      newMerkleRoot: null
    ): EventFilter;

    OwnershipTransferStarted(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RegisteredSubdomain(
      rootNode: BytesLike | null,
      label: null,
      receiver: null
    ): EventFilter;

    RegistrableUpdated(newRegistrable: null): EventFilter;

    RelayerUpdated(newRelayer: null): EventFilter;

    Transfer(
      from: string | null,
      to: string | null,
      tokenId: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides): Promise<BigNumber>;

    "acceptOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    baseURI(overrides?: CallOverrides): Promise<BigNumber>;

    "baseURI()"(overrides?: CallOverrides): Promise<BigNumber>;

    claimed(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    commissionBips(overrides?: CallOverrides): Promise<BigNumber>;

    "commissionBips()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<BigNumber>;

    ensResolver(overrides?: CallOverrides): Promise<BigNumber>;

    "ensResolver()"(overrides?: CallOverrides): Promise<BigNumber>;

    feeConfigs(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "feeConfigs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merkleRoots(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "merkleRoots(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerWithNFTOwnership(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])"(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    registerWithProof(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])"(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    registrable(overrides?: CallOverrides): Promise<BigNumber>;

    "registrable()"(overrides?: CallOverrides): Promise<BigNumber>;

    relayer(overrides?: CallOverrides): Promise<BigNumber>;

    "relayer()"(overrides?: CallOverrides): Promise<BigNumber>;

    renderer(overrides?: CallOverrides): Promise<BigNumber>;

    "renderer()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setCommissionBips(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setCommissionBips(uint256)"(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMerkleRoot(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMerkleRoot(bytes32,bytes32)"(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistrable(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRegistrable(bool)"(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRegistrationFee(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setRegistrationFee(bytes32,(address,uint256))"(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<BigNumber>;

    setRelayer(newRelayer: string, overrides?: Overrides): Promise<BigNumber>;

    "setRelayer(address)"(
      newRelayer: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    withdrawFees(to: string, overrides?: Overrides): Promise<BigNumber>;

    "withdrawFees(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "acceptOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    approve(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    baseURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "baseURI()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimed(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(bytes32,bytes32)"(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    commissionBips(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "commissionBips()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ensRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ensRegistry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ensResolver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ensResolver()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeConfigs(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "feeConfigs(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getApproved(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApprovedForAll(address,address)"(
      owner: string,
      operator: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merkleRoots(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "merkleRoots(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ownerOf(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pendingOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerWithNFTOwnership(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "registerWithNFTOwnership(address,uint256,bytes32,string,bytes32,bytes32[])"(
      nftContract: string,
      tokenId: BigNumberish,
      rootNode: BytesLike,
      label: string,
      rootShard: BytesLike,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    registerWithProof(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "registerWithProof(bytes32,bytes32,address[],string[],bytes32[][])"(
      rootNode: BytesLike,
      rootShard: BytesLike,
      receivers: string[],
      labels: string[],
      merkleProofs: BytesLike[][],
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    registrable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "registrable()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "relayer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renderer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "renderer()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setApprovalForAll(address,bool)"(
      operator: string,
      approved: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setCommissionBips(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setCommissionBips(uint256)"(
      newBips: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMerkleRoot(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMerkleRoot(bytes32,bytes32)"(
      rootShard: BytesLike,
      newMerkleRoot: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistrable(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistrable(bool)"(
      newRegistrable: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRegistrationFee(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRegistrationFee(bytes32,(address,uint256))"(
      rootNode: BytesLike,
      feeConfig: { recipient: string; fee: BigNumberish },
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setRelayer(
      newRelayer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRelayer(address)"(
      newRelayer: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenURI(uint256)"(
      tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: string,
      to: string,
      tokenId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    withdrawFees(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "withdrawFees(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
